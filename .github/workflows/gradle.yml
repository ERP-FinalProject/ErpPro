name: CI/CD Docker3

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ main ]

# 환경설정
env:
  VERSION: 'v1.0'
  NAME: erppro

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradlew에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      # 2. Spring Boot 애플리케이션 빌드
       # 2. Spring Boot 애플리케이션 빌드
      # - name: Build with Gradle
      #   uses: ./backend/gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      #   with:
      #     arguments: clean bootJar
      - name: Build with Gradle
        run: |
          cd backend  # backend 디렉토리로 이동
          ./gradlew clean bootJar  # Gradle 빌드 명령 실행

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME  }}/erppro:${{ env.VERSION }} ./backend

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME  }}/erppro:${{ env.VERSION }}

  deploy:
    needs: build-docker-image  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, finalproject ]  # AWS ./configure에서 사용할 label명
    steps:
      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME  }}
          password: ${{ secrets.DOCKER_PASSWORD  }}
          
      # my_bridge_network 사용하도록 지정 (필요 시 언주석 해제)
      - name: Docker run
        run: |
          # Nginx 컨테이너 실행
          sudo docker run -d --name nginx --restart always -p 80:80 \
            -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:ro \
            nginx

          # WAS1 컨테이너 실행
          sudo docker stop was1 || true
          sudo docker rm was1 || true
          sudo docker run -d --name was1 --restart always -p 8081:8081 \
            sumin22/erppro:v1.0

          # WAS2 컨테이너 실행
          sudo docker stop was2 || true
          sudo docker rm was2 || true
          sudo docker run -d --name was2 --restart always -p 8082:8081 \
            sumin22/erppro:v1.0

          # 불필요한 이미지 정리
          sudo docker image prune -af
